[user]
	name = Matt Woods
	email = mw@mattwoods.io
[github]
  # https://github.com/blog/180-local-github-config
  user = matopher
[color]
# ui = true is a superset of all the more specific color options
#  as documented at http://book.git-scm.com/5_customizing_git.html
# When set to always, always use colors in all git commands which are capable of colored output.
# When false, never. When set to true or auto, use colors only when the output is to the terminal.
# When more specific variables of color.* are set, they always take precedence over this setting.
# Defaults to false.
  ui = auto
  # diff = false
  # diff = true
  # status = auto
  # branch = auto

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green
[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[advice]
  statusHints = false

[gui]
  fontdiff = -family Monaco -size 10 -weight normal -slant roman -underline 0 -overstrike 0

[core]
  excludesfile = ~/.gitignore
  quotepath = false
  # line endings
  # force LF during add
	# autocrlf = false
  # autocrlf = true # for windows to convert to CRLF on checkout and LF on add
  # warn but allow line ending conversion to proceed
  safecrlf = warn
  # prevent crlf (then you will have to deal with the problem -- dos2unix, etc)
  #safecrlf = true
  editor = vim
  #editor = subl -w

[push]
    default = upstream

[alias]
  # most commonly used
  s = status
  co = checkout
  cob = checkout -b
  d = diff --color-words
  pr = pull-request

  # least used
  unstage = reset
  mup = !git checkout master && git pull && git checkout -
  br = branch -a
  s = status -s -u
  cl = log --stat -C -2
  c = commit
  cm = commit -m
  dh = diff HEAD
  who = shortlog -s --
  p = push
  pl = pull
  lod = log --oneline --decorate
  lg = log --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  lol = log --pretty=oneline --graph --abbrev-commit --all
  sync = !git pull && git push
  listconf = config --global --list
  diffall = diff HEAD
  scrub = !git reset --hard && git clean -fd
  rv = remote -v
  ri = rebase --interactive
  redocommit = reset --soft HEAD^
  lastweekhistory = shortlog --since=one.week.ago

  fixup = "!sh -c 'git commit -m \"fixup! $(git log -1 --format='\\''%s'\\'' $@)\"' -"
  squash = "!sh -c 'git commit -m \"squash! $(git log -1 --format='\\''%s'\\'' $@)\"' -"

[apply]
  whitespace = nowarn

[rerere]
  #Enable the recording of resolved conflicts, so that identical hunks can be resolved automatically later on
  enabled = 1

[difftool]
  prompt = false

[diff]
  tool = vimdiff

[init]
  templatedir = ~/.dotfiles/.git_template

[commit]
  template = ~/.dotfiles/.gitmessage

[mergetool]
  prompt = false
  keepBackup = false

[merge]
	tool = vimdiff
  # Always show a diffstat at the end of a merge
  stat = true
  conflictstyle = diff3

[branch]
    # Automatically set up pull to be --rebase
    # autosetuprebase = always

[credential]
    # cache creds (git help credential-cache)
  helper = cache

[filter "tabspace"]
  clean = expand -t 4

[push]
  default = matching
	followTags = true

[filter "media"]
  required = true
  clean = git media clean %f
  smudge = git media smudge %f

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
  required = true
	process = git-lfs filter-process
